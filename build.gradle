// Top-level build file where you can add configuration options common to all sub-projects/modules.
apply plugin: "com.github.ben-manes.versions"

buildscript {
    repositories {
        google()
        mavenCentral()

        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:8.11.0'
        classpath 'com.google.gms:google-services:4.4.3'
        classpath 'org.jacoco:org.jacoco.core:0.8.13'
        classpath 'com.google.firebase:firebase-crashlytics-gradle:3.0.4'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:2.2.0"
        classpath "org.jlleitschuh.gradle:ktlint-gradle:10.0.0"
        classpath "com.github.ben-manes:gradle-versions-plugin:0.42.0"
    }
}

allprojects {
    repositories {
        // Needs to go first to get specialty libraries https://stackoverflow.com/a/48438866/137744
        google()

        mavenCentral()
        maven { url 'https://oss.sonatype.org/content/groups/public' }
        maven { url 'https://jitpack.io' }
        maven {
            url 'https://staging.dev.medicmobile.org/_couch/maven-repo'
            metadataSources { artifact() }
        }

        maven {
            url 'https://api.mapbox.com/downloads/v2/releases/maven'
            authentication {
                basic(BasicAuthentication)
            }
            credentials {
                // Do not change the username below.
                // This should always be `mapbox` (not your username).
                username = "mapbox"
                // Use the secret token you stored in gradle.properties as the password
                password = project.properties['MAPBOX_DOWNLOADS_TOKEN'] ?: ""
            }
        }

        // Local repo for dependencies that only existed in the defunct JCenter repo
        maven {
            url "${rootDir}/jcenter-local-m2"
        }

    }
}

configurations.all {
    transitive = true
}

task checkAll(type: GradleBuild) {
    tasks = ['checkCode', 'checkTests']
}

task checkCode(type: GradleBuild) {
    tasks = ['pmd', 'ktlintCheck', 'checkstyle', 'lintDebug']
}

task checkTests(type: GradleBuild) {
    tasks = ['testDebugUnitTest', 'connectedDebugAndroidTest']
}

task checkFeature(type: GradleBuild) {
    tasks = ["connectedDebugAndroidTest"]
    startParameter.projectProperties = ["android.testInstrumentationRunnerArguments.package": "org.odk.collect.android.feature"]
}

task checkRegression(type: GradleBuild) {
    tasks = ["connectedDebugAndroidTest"]
    startParameter.projectProperties = ["android.testInstrumentationRunnerArguments.package": "org.odk.collect.android.regression"]
}

task checkInstrumented(type: GradleBuild) {
    tasks = ["connectedDebugAndroidTest"]
    startParameter.projectProperties = ["android.testInstrumentationRunnerArguments.package": "org.odk.collect.android.instrumented"]
}

ext {
    androidCompileSdk = 35
    androidMinSdk = 29
    androidTargetSdk = 35

    fragmentVersion = '1.8.8'
    daggerVersion = '2.56.2'
    okhttp3Version = '4.10.0'
    timberVersion = '5.0.1'
    materialVersion = '1.12.0'
    coreKtxVersion = '1.9.0'
    kotlinVersion = '2.2.0'
}
