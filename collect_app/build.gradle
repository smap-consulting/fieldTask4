apply plugin: 'com.android.application'
apply plugin: 'com.google.firebase.crashlytics'
apply from: '../config/quality.gradle'
apply from: '../config/jacoco.gradle'
apply plugin: 'kotlin-android'

import com.android.ddmlib.DdmPreferences

DdmPreferences.setTimeOut(60000)

ant.condition(property: 'os', value: 'windows') {
    os(family: 'windows')
}
ant.condition(property: 'os', value: 'unix') {
    os(family: 'unix')
}

// smap delete out the auto setting of version numbers

def secretsFile = file('secrets.properties')
def secrets = new Properties()
if (secretsFile.exists()) {
    secrets.load(new FileInputStream(secretsFile))
}
def googleMapsApiKey = secrets.getProperty('GOOGLE_MAPS_API_KEY', '')
def mapboxToken = secrets.getProperty('MAPBOX_ACCESS_TOKEN', '')

android {
    namespace = "org.odk.collect.android"

    compileSdkVersion = libs.versions.compileSdk.get().toInteger()

    buildFeatures {
        viewBinding true
    }

    defaultConfig {
        applicationId "org.smap.smapTask.android"
        minSdkVersion libs.versions.minSdk.get().toInteger()
        targetSdkVersion libs.versions.targetSdk.get().toInteger()
        versionCode(6838)
        versionName getVersionName()
        testInstrumentationRunner('androidx.test.runner.AndroidJUnitRunner')
        multiDexEnabled true
        vectorDrawables.useSupportLibrary = true
        archivesBaseName = 'fieldTask'      // smap
    }

    tasks.withType(JavaCompile).configureEach{
        options.fork = true
        options.forkOptions.jvmArgs +=[
                '--add-exports=jdk.compiler/com.sun.tools.javac.tree=ALL-UNNAMED',
                '--add-exports=jdk.compiler/com.sun.tools.javac.code=ALL-UNNAMED',
                '--add-exports=jdk.compiler/com.sun.tools.javac.util=ALL-UNNAMED']
    }

    signingConfigs {
        release {
            if (secrets.getProperty('RELEASE_STORE_FILE')) {
                storeFile file(secrets.getProperty('RELEASE_STORE_FILE'))
                storePassword secrets.getProperty('RELEASE_STORE_PASSWORD')
                keyAlias secrets.getProperty('RELEASE_KEY_ALIAS')
                keyPassword secrets.getProperty('RELEASE_KEY_PASSWORD')
            }
        }

        // This uses the default debug keystore that the Android tooling creates https://stackoverflow.com/questions/16622528/android-studio-debug-keystore
        selfSignedRelease {
            storeFile new File(System.getProperty("user.home") + '/.android/debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
    }

    flavorDimensions "flavour"

    productFlavors {
        standard {
            applicationId "org.smap.smapTask.android"
            versionName "6.838"
        }
        fieldTaskMax {
            applicationId "org.smap.smapTask.android.fieldTaskMax"
            versionName "6.838"
        }
        plan {
            applicationId "org.smap.smapTask.android.plan"
            versionName "6.838-plan"
        }
        kontrolid {
            applicationId "org.smap.smapTask.android.kontrolid"
            versionName "6.838-kontrolid"
        }
        xxx4 {
            applicationId "org.smap.smapTask.android.xxx4"
            versionName "6.838-xxx4"
        }
        portero {
            applicationId "org.smap.smapTask.android.portero"
            versionName "6.838-portero"
        }
        kontrolid_corporate {
            applicationId "org.smap.smapTask.android.kontrolid_corporate"
            versionName "6.838-kontrolid"
        }
        xxx3 {
            applicationId "org.smap.smapTask.android.xxx3"
            versionName "6.838-xxx3"
        }
        xxx1 {
            applicationId "org.smap.smapTask.android.xxx1"
            versionName "6.838-xxx1"
        }
        meqa {
            applicationId "org.smap.smapTask.android.meqa"
            versionName "6.838-meqa"
        }
        xxx2 {
            applicationId "org.smap.smapTask.android.xxx2"
            versionName "6.838-xxx2"
        }
        pop {
            applicationId "org.smap.smapTask.android.pop"
            versionName "6.838-pop"
        }
        tdh {
            applicationId "org.smap.smapTask.android.tdh"
            versionName "6.838-tdh"
        }
        assignfield2 {
            applicationId "org.smap.smapTask.android.assignfield2"
            versionName "6.838-assignfield2"
        }
        informEd {
            applicationId "org.smap.smapTask.android.informEd"
            versionName "6.838-informEd"
        }
        pangolin {
            applicationId "org.smap.smapTask.android.pangolin"
            versionName "6.838-pangolin"
        }
        stl2 {
            applicationId "org.smap.smapTask.android.stl2"
            versionName "6.838-stl2"
        }
        ljstracker {
            applicationId "org.smap.smapTask.android.ljstracker"
            versionName "6.838-ljstracker"
        }
        bps {
            applicationId "org.smap.smapTask.android.bps"
            versionName "6.838-bps"
        }
    }

    buildTypes {

        // Release build for all forks
        release {
            buildConfigField("String", "SENDER_ID", "\"" + secrets['SENDER_ID'] + "\"")    // smap
            buildConfigField("String", "AWS_MOBILEHUB_USER_AGENT", "\"" + secrets['AWS_MOBILEHUB_USER_AGENT'] + "\"")   // smap
            buildConfigField("String", "AMAZON_COGNITO_REGION", "\"" + secrets['AMAZON_COGNITO_REGION'] + "\"")         // smap
            buildConfigField("String", "AMAZON_COGNITO_IDENTITY_POOL_ID", "\"" + secrets['AMAZON_COGNITO_IDENTITY_POOL_ID'] + "\"")   // smap
            buildConfigField("String", "AMAZON_DYNAMODB_REGION", "\"" + secrets['AMAZON_DYNAMODB_REGION'] + "\"")  // smap

            if (secrets.getProperty('RELEASE_STORE_FILE')) {
                signingConfig signingConfigs.release
            }
            minifyEnabled(true)
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
            resValue("bool", "CRASHLYTICS_ENABLED", "true")
            resValue("string", "GOOGLE_MAPS_API_KEY", googleMapsApiKey)
            buildConfigField 'String', "MAPBOX_ACCESS_TOKEN", '"' + mapboxToken + '"'

            matchingFallbacks = ['release'] // So other modules use release build type for this
        }

        selfSignedRelease {
            signingConfig signingConfigs.selfSignedRelease

            minifyEnabled(true)
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
            resValue("bool", "CRASHLYTICS_ENABLED", "true")
            resValue("string", "GOOGLE_MAPS_API_KEY", googleMapsApiKey)
            buildConfigField 'String', "MAPBOX_ACCESS_TOKEN", '"' + mapboxToken + '"'

            matchingFallbacks = ['release'] // So other modules use release build type for this
        }

        debug {
            buildConfigField("String", "SENDER_ID", "\"" + secrets['SENDER_ID'] + "\"")    // smap
            buildConfigField("String", "AWS_MOBILEHUB_USER_AGENT", "\"" + secrets['AWS_MOBILEHUB_USER_AGENT'] + "\"")
            // smap
            buildConfigField("String", "AMAZON_COGNITO_REGION", "\"" + secrets['AMAZON_COGNITO_REGION'] + "\"")
            // smap
            buildConfigField("String", "AMAZON_COGNITO_IDENTITY_POOL_ID", "\"" + secrets['AMAZON_COGNITO_IDENTITY_POOL_ID'] + "\"")
            // smap
            buildConfigField("String", "AMAZON_DYNAMODB_REGION", "\"" + secrets['AMAZON_DYNAMODB_REGION'] + "\"")
            // smap


            debuggable(true)
            testCoverageEnabled((findProperty("enableJacoco") ?: "false").toBoolean())
            resValue("bool", "CRASHLYTICS_ENABLED", "true")
            resValue("string", "GOOGLE_MAPS_API_KEY", googleMapsApiKey)
            buildConfigField 'String', "MAPBOX_ACCESS_TOKEN", '"' + mapboxToken + '"'
        }
    }

    // https://stackoverflow.com/a/27119543/152938
    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            outputFileName = new File(outputFileName.replace(".apk", "-${defaultConfig.versionName}.apk"))
        }
    }
    testVariants.all { variant ->
        variant.outputs.all { output ->
            outputFileName = new File(outputFileName.replace(".apk", "-${defaultConfig.versionName}.apk"))
        }
    }

    packagingOptions {
        // Pick first occurrence of any files that cause conflicts, as defined
        // in common.gradle
        pickFirst 'META-INF/DEPENDENCIES'
        pickFirst 'META-INF/LICENSE'
        pickFirst 'META-INF/LICENSE.txt'
        pickFirst 'META-INF/NOTICE'
        pickFirst 'META-INF/NOTICE.txt'
        pickFirst 'META-INF/services/com.fasterxml.jackson.core.JsonFactory'
        pickFirst 'META-INF/services/com.fasterxml.jackson.core.ObjectCodec'
        pickFirst 'META-INF/services/javax.ws.rs.ext.MessageBodyReader'
        pickFirst 'META-INF/services/javax.ws.rs.ext.MessageBodyWriter'

        // To ensure that ODK Collect is installable on all devices, we don't use
        // abiFilters to exclude any ABIs; but to keep the APK slim, we include
        // the Mapbox native library only for 32-bit and 64-bit ARM devices and
        // omit it for all X86 devices.
        if (!project.hasProperty("x86Libs")) {
            exclude 'lib/x86/libmapbox-maps.so'
            exclude 'lib/x86/libmapbox-common.so'
            exclude 'lib/x86/libc++_shared.so'
            exclude 'lib/x86_64/libmapbox-maps.so'
            exclude 'lib/x86_64/libmapbox-common.so'
            exclude 'lib/x86_64/libc++_shared.so'
        }
    }

    compileOptions {
        coreLibraryDesugaringEnabled true
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
            returnDefaultValues = true
            all {
                maxHeapSize = "1024m"
            }
        }
    }

    lintOptions {
        abortOnError false
        xmlReport true
        htmlReport true
        checkGeneratedSources true
        checkReleaseBuilds false
        lintConfig file("${project.rootDir}/config/lint.xml")
    }
}

configurations.all {
    resolutionStrategy {
        cacheDynamicVersionsFor(0, 'seconds')
        cacheChangingModulesFor(0, 'seconds')

        force('com.google.code.findbugs:jsr305:1.3.9')
        force 'org.objenesis:objenesis:2.6'
    }
    transitive = true
}

dependencies {
    coreLibraryDesugaring(libs.desugar)

    implementation libs.legacySupportV13
    implementation libs.androidxCoreKtx
    implementation libs.androidxBrowser
    implementation libs.androidxAppcompat
    implementation libs.androidxWorkRuntime

    implementation libs.androidxExinterface
    implementation libs.androidxPreference
    implementation libs.androidxFragment

    implementation libs.androidMaterial
    implementation libs.androidFlexbox

    implementation libs.playServicesAuth
    implementation libs.playServicesMaps
    implementation libs.playServicesLocation
    implementation "com.google.firebase:firebase-messaging:23.1.0"      // smap synchronisation

    implementation 'com.google.firebase:firebase-analytics:22.5.0'
    implementation 'com.google.firebase:firebase-crashlytics:19.4.4'

    implementation 'com.mapbox.mapboxsdk:mapbox-android-sdk:9.7.1' // update from 9.2.1 to fix mapbox issue

    // Upgrading will require more changes in our codebase https://github.com/getodk/collect/issues/4305
    implementation 'com.mapbox.mapboxsdk:mapbox-android-plugin-annotation-v9:0.8.0'

    implementation("com.google.guava:guava:30.1-android")

    implementation libs.okHttp
    implementation libs.okHttpTls
    implementation libs.okHttpDigest

    implementation 'androidx.multidex:multidex:2.0.1'

    implementation libs.persianJodaTime
    implementation 'com.github.chanmratekoko:myanmar-calendar:1.0.6.RC3'
    implementation 'bikramsambat:bikram-sambat:1.1.0'
    implementation "com.github.martin-stone:hsv-alpha-color-picker-android:3.0.1"
    implementation libs.commonsIo
    implementation libs.opencsv

    implementation('net.sf.kxml:kxml2:2.3.0')                       // smap javarosa dependency is this actually needed?
    implementation files('libs/javarosa-3.1.4.jar')    // smap javarosa

    implementation libs.karumiDexter
    implementation libs.osmdroid
    implementation("com.google.api-client:google-api-client-android:1.31.1") {
        exclude group: 'org.apache.httpcomponents'
        exclude group: 'com.google.guava'
    }
    implementation("com.google.apis:google-api-services-drive:v3-rev20201130-1.31.0") {
        exclude group: 'org.apache.httpcomponents'
        exclude group: 'com.google.guava'
    }
    implementation("com.google.apis:google-api-services-sheets:v4-rev20201130-1.31.0") {
        exclude group: 'org.apache.httpcomponents'
        exclude group: 'com.google.guava'
    }

    implementation libs.timber
    implementation "org.slf4j:slf4j-api:2.0.0-alpha0"
    implementation "com.arcao:slf4j-timber:3.1@aar"

    //updating would require minSdkVersion >=24, it uses zxing:core 3.3.2 by default
    implementation "com.journeyapps:zxing-android-embedded:3.6.0"

    implementation "net.danlew:android.joda:2.10.7.2"

    // Real LeakCanary for debug builds only: notifications, analysis, etc
    //androidTestImplementation 'com.squareup.leakcanary:leakcanary-android:2.5'

    // Android Architecture Components:
    implementation "androidx.lifecycle:lifecycle-extensions:2.2.0"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:2.5.1"
    implementation "androidx.viewpager2:viewpager2:1.0.0"

    // smap aws
    implementation 'com.amazonaws:aws-android-sdk-core:2.16.13'
    //implementation 'com.amazonaws:aws-android-sdk-core:2.4.2'
    // add the DynamoDB SDK and DynamoDB Object Mapper dependency
    implementation 'com.amazonaws:aws-android-sdk-ddb:2.16.13'
    implementation 'com.amazonaws:aws-android-sdk-ddb-mapper:2.16.13'
    implementation project(':AWSMobileHelper')

    // charts
    implementation 'com.github.PhilJay:MPAndroidChart:v3.0.2'

    // Dagger:
    implementation libs.dagger
    annotationProcessor libs.daggerCompiler

    // Dagger Android:
    implementation libs.daggerAndroid
    implementation "com.google.dagger:dagger-android-support:2.56.2"
    annotationProcessor libs.daggerAndroidProcessor

    // RxJava 2:
    implementation "io.reactivex.rxjava2:rxandroid:2.1.1"
    implementation "io.reactivex.rxjava2:rxjava:2.2.21"

    // Better "Subjects" for Rx:
    implementation "com.jakewharton.rxrelay2:rxrelay:2.1.1"

    implementation 'com.github.Armen101:AudioRecordView:1.0.5'

    // Glide
    implementation 'com.github.bumptech.glide:glide:4.11.0'

    implementation('org.mp4parser:muxer:1.9.41') {
        exclude group: 'org.hamcrest'
    }

    implementation libs.gson

    implementation project(':shared')
    implementation project(':androidshared')
    implementation project(':nbistubs')
    implementation project(':strings')
    implementation project(':material')
    implementation project(':async')
    implementation project(':audioclips')
    implementation project(path: ':audiorecorder')
    implementation project(':location')

    // Makes binding to Views easy:
    implementation "com.jakewharton:butterknife:10.2.3"
    annotationProcessor "com.jakewharton:butterknife-compiler:10.2.3"

    // Annotations understood by FindBugs
    compileOnly 'com.google.code.findbugs:annotations:3.0.1'
    compileOnly 'com.google.code.findbugs:jsr305:3.0.2'
}

// Must be at bottom to prevent dependency collisions
// https://developers.google.com/android/guides/google-services-plugin
apply plugin: 'com.google.gms.google-services'



